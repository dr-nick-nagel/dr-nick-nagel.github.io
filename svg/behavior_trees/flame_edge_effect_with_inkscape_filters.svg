<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
IMPORTANT!! 

The base filters for this effect were obtained in INKSCAPE:

FILTERS >> PROTRUSIONS >> FIRE

Note: at first I attempted to animate feTurbulence `basefrequences`. 
The sad Problem is you can't idenfinetly animate those parameters
to get a radiating effect. So the best you can do is animate the 
seed which gens a new random perlin field...

https://gemini.google.com/app/e9eabd0e574068c1

-->
<svg id="flame_effect"
   width="600"
   height="600"
   viewBox="0 0 300 300"
   version="1.1"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs id="defs1">
    <filter  id="flame_edge"
       y="-0.45760002"
       width="1.7252"
       height="1.7752"
       x="-0.40760002"
       style="color-interpolation-filters:sRGB;"
    >
      <feMorphology id="feMorphology41"
         result="result1"
         radius="2.4"
         operator="dilate"
          />
      <feTurbulence  id="feTurbulence41"
         baseFrequency="0.09 0.028"
         numOctaves="5"
      ></feTurbulence>
      <feColorMatrix id="feColorMatrix41"
         result="result2"
         values="2 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 1 0"
          />
      <feDisplacementMap
         result="result4"
         scale="10"
         yChannelSelector="G"
         xChannelSelector="R"
         in="result1"
         in2="result2"
         id="feDisplacementMap41" />
      <feFlood
         result="result3"
         flood-opacity="1"
         flood-color="rgb(255,159,54)"
         id="feFlood41" />
      <feMorphology
         radius="3.8"
         result="result7"
         in="result4"
         id="feMorphology42" />
      <feGaussianBlur
         result="result7"
         in="result7"
         stdDeviation="2.4"
         id="feGaussianBlur42" />
      <feComposite
         result="result5"
         in2="result4"
         in="result3"
         operator="in"
         id="feComposite42" />
      <feComposite
         operator="out"
         in2="result7"
         id="feComposite43" />
      <feOffset
         result="result6"
         dy="-7"
         dx="-4.5"
         id="feOffset43" />
    </filter>
  </defs>
  <g id="flame_group">
    <path      id="hole"
       style="fill:#ff7f2a;"
       filter="url(#flame_edge)"
       d="m 213.62874,108.67015 3.9563,-2.33968 0.6783,-3.8571 6.73063,1.12273 15.54383,-29.149425 37.72041,55.434405 -25.11907,-0.0826 1.78769,6.30785 -0.50407,4.37317 -4.55944,2.43667 z"
       display="inline"
       />
  </g>
<script type="text/ecmascript">
  <![CDATA[
    const feTurbulence = document.getElementById('feTurbulence41');
    // Animation properties
    let horizontalFreq = 0.09;
    const verticalRange  = 0.01; // The total range of the animation     0.15
    const verticalSpeed  = 0.5; // The speed of the "ping-pong" effect  0.05
    const animationSpeed  = 10;
    let startTime = null;

    function animateBaseFrequency(timestamp) {
      if (!startTime) {
        startTime = timestamp;
      }
      const elapsedTime = (timestamp - startTime) / 1000; // Time in seconds
      // Calculate the position in a loop that goes from 0 to 1 and back to 0
      const loop = elapsedTime * verticalSpeed;
      const t = 1 - Math.abs(2 * (loop - Math.floor(loop + 0.5)));
      // Interpolate the vertical frequency based on the loop value
      const currentVerticalFreq = t * verticalRange;

      // Set the new baseFrequency value
      // this looks throbbing. not quite right...
      //feTurbulence.setAttribute('baseFrequency', `${horizontalFreq} ${currentVerticalFreq}`);
      // this is the best you're gonnna get at flicker...
      feTurbulence.setAttribute('seed', elapsedTime * animationSpeed);
      requestAnimationFrame(animateBaseFrequency);
    }
    requestAnimationFrame(animateBaseFrequency);
  ]]>
</script>
</svg>
