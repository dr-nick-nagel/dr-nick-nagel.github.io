<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="600" height="200">
  <path id="display_path"
        style="fill:none;stroke:#00ff00;stroke-width:1px"
        >
    <animate id="SMIL_ANIMATION"
             attributeName="d" 
             dur="2.5s" 
             repeatCount="indefinite" 
             keyTimes="0.00;0.06;0.13;0.19;0.25;0.31;0.38;0.44;0.50;0.56;0.63;0.69;0.75;0.81;0.88;0.94;1.00"
             values="
M 0,50 C 3.2379,45.2655 13.2837,25.07956 25,25 36.7848,24.92 43.6901,40.0464 50,50 56.4656,60.1992 63.2153,74.8993 75,75 86.7851,75.1007 97.1469,54.7797 100,50;
M 0,56.25 C 5.6881,57.8247 15.4693,45.7741 25,37.5 33.9789,30.0362 41.0639,32.5977 50,37.5 58.8602,42.3605 66.6076,52.6091 75,56.25 85.2891,60.7684 95.2528,58.3631 100,56.25;
M 0,62.5 C 8.1382,66.4625 17.5873,55.7144 25,50 31.1736,44.9062 37.7405,25.3745 50,31.25 60.8355,36.5246 69.9994,50.3182 75,56.25 83.7431,66.4361 93.2933,61.9465 100,62.5;
M 0,68.75 C 9.7494,71.6731 18.6096,60.8731 25,56.25 29.5039,52.8303 35.5891,43.5404 50,37.5 60.4122,33.0564 70.0853,44.3216 75,50 82.5515,58.6822 91.6621,66.9992 100,68.75;
M 0,75 C 9.1383,75.384 17.6549,60.5001 25,50 32.798,38.8524 39.4378,25.1477 50,25 59.9938,24.8603 67.7659,40.319 75,50 83.4685,61.3341 91.6112,75.7471 100,75;
M 0,68.75 C 10.2998,70.6259 17.4535,67.1232 25,62.5 31.7426,58.3038 38.0076,42.1822 50,37.5 60.0322,33.5957 67.8238,40.5635 75,50 82.4067,59.7732 91.2537,71.1192 100,68.75;
M 0,62.5 C 9.9625,65.8671 16.7477,67.3052 25,68.75 32.754,70.1005 38.6613,57.8966 50,50 60.2644,42.5847 68.157,29.9616 75,31.25 85.5393,33.3362 92.3652,49.7196 100,62.5;
M 0,56.25 C 8.8734,60.4701 15.5065,71.2742 25,75 33.7356,78.4313 38.6767,61.5297 50,50 60.3235,38.4703 68.4821,28.5819 75,25 85.4063,19.2953 93.6574,36.5293 100,50;
M 0,50 C 7.6013,61.2866 15.3637,75.0349 25,75 35.3197,74.9626 41.5674,61.352 50,50 57.0275,40.5395 64.5493,25.0582 75,25 85.6694,24.9406 91.9344,40.3013 100,50;
M 0,43.75 C 6.2905,41.1612 12.4677,26.1241 25,31.25 35.2112,35.4222 43.0927,52.2017 50,62.5 56.0363,71.5411 63.0735,74.2977 75,75 83.8108,75.5377 93.1862,60.8501 100,56.25;
M 0,37.5 C 5.2228,36.6516 14.3418,33.1678 25,37.5 35.4387,41.7316 41.9194,57.5095 50,62.5 58.5883,67.7985 66.1595,68.5549 75,68.75 84.9783,68.9625 95.4664,50.7845 100,50;
M 0,31.25 C 6.2256,30.0802 14.5973,37.3497 25,43.75 35.5105,50.2134 41.4535,62.1885 50,62.5 58.9106,62.8254 66.5518,50.7299 75,43.75 83.253,36.9486 91.4812,25.8911 100,37.5;
M 0,25 C 8.9122,24.76 17.1172,38.9776 25,50 33.0886,61.3102 40.7529,74.9112 50,75 59.2422,75.0887 66.0102,64.7707 75,50 82.3493,37.9236 91.2806,25.0975 100,25;
M 0,31.25 C 7.062,30.7894 16.3455,28.3893 25,31.25 33.9782,34.2327 39.5279,45.8426 50,50 58.9835,53.6163 67.1317,50.7671 75,43.75 82.8337,36.7671 91.1446,28.2187 100,31.25;
M 0,37.5 C 6.1387,37.1877 13.9935,39.7257 25,37.5 34.9742,35.4602 41.5104,42.5898 50,50 58.6958,57.5794 66.4547,67.8423 75,68.75 85.0733,69.8383 92.7678,54.8278 100,50;
M 0,43.75 C 4.4757,43.0507 13.0555,35.9778 25,37.5 35.8614,38.9064 43.4593,48.8933 50,56.25 56.2918,63.3045 63.5104,75.0169 75,75 84.8523,74.9856 93.5943,58.1666 100,50;
M 0,50 C 3.2379,45.2655 13.2837,25.0796 25,25 36.7848,24.92 43.6901,40.0464 50,50 56.4656,60.1992 63.2153,74.8993 75,75 86.7851,75.1007 97.1469,54.7797 100,50" />
  </path>

  <script><![CDATA[
    // This block is for documentation/debugging, not live animation
    // If you'd like to programmatically interpolate additional frames,
    // you can use this template for generating intermediate cubic BÃ©zier d-strings.
    // Consider reusing this inside a module for path tweening later.

    const interpolatePath = (path1, path2, t) => {
      const nums1 = path1.match(/-?\d+\.?\d*/g).map(Number);
      const nums2 = path2.match(/-?\d+\.?\d*/g).map(Number);
      const interp = nums1.map((n, i) => (1 - t) * n + t * nums2[i]);
      return `M ${interp[0]},${interp[1]} C ${interp[2]},${interp[3]} ${interp[4]},${interp[5]} ${interp[6]},${interp[7]} ${interp[8]},${interp[9]} ${interp[10]},${interp[11]} ${interp[12]},${interp[13]} ${interp[14]},${interp[15]} ${interp[16]},${interp[17]} ${interp[18]},${interp[19]} ${interp[20]},${interp[21]}`;
    };
  ]]></script>
</svg>
